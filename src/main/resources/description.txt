
    Приложение [MyComoxPublisher] симулирует поведение датчиков на моторах для последующего
их отображения в приложении [MyComox]. Приложение раз в секунду добавляет значения в БД из
расчета: для каждого мотора добавляется по одному случайному значению для каждого его датчика.
    Работа происходит по принципу: на странице пользователь видит все актуальные моторы из БД,
нажимая на каждый из которых, указывает серверу раз в секунду публиковать данные в БД о моторе.
    Приложение состоит из бэкэнда и фронтэнда [timerdb.html]

1. Сервер
    Содержит в себе список активных в данный момент моторов [сlass ActiveEnginesArray],
которые отправляет ему фронт путем запроса на [/change_array]. Отправка массива активных
моторов происходит по нажатию на мотор, при этом меняется состояние мотора, а на сервер
отправляется весь массив, даже пустой.
    Также на сервере есть функция с аннотацией [@Scheduled], которая срабатывает раз в секунду,
при этом она:
    - достает все моторы из БД,
    - пробегает по списку всех моторов из БД и проверяет,
      есть ли совпадения с [ActiveEnginesArray], то есть, активны ли какие-то из них,
    - если мотор активен, то генерится 3 значения, потом они добавляются в БД,
      если добавление успешно, то результат вносится в массив, размер которого
      выводится в консоль после вызова функции, чтобы проверить, сколько успешных
      добавлений было в бд.
    Плюс к этому, на сервере есть контроллер [/motors], который отдает список имен всех
моторов из БД на страницу, которая запрашивает список актуальных имен каждую секунду.

2. Фронт
    При загрузке страницы вызывается функция [window.onload], в которой 2 запроса к серверу:
    - на [/change_array], чтобы обнулить все активные моторы (в том числе в случае перезагрузки страницы),
    - на [/motors], чтобы получить список имен всех моторов, после чего в случае успеха
      вызывается функция [addNewEngine], которая динамически добавляет на страницу блоки с моторами,
      а также запускается таймер, который раз в секунду вызывает [getTimerData].
    Затем [getTimerData] раз в секунду стучится в [/motors], обновляет данные об актуальных моторах в БД,
сопоставляет их с массивом, содержащим имена текущих моторов (не путать с активными), и, если есть расхождения,
добавляет или удаляет соответствующие блоки со страницы и записи из массива [current_engines].
    Eсли в момент выполнения запроса из функции [getTimerData] возникает ошибка, к примеру, сервер
недоступен, то таймер выключается, список активных моторов очищается, все кнопки становятся красными,
а сами блоки становятся недоступными для нажатия. Для дальнейшего использования сервиса пользователю
рекомендуется обновить страницу и проверить соединение с сервером.